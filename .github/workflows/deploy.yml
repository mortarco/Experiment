name: ci

on: 
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  security-events: write
  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: '17.0.4'
      - name: Build
        run: >
          mvn clean install
          test -Dmaven.test.failure.ignore=true
          site -DgenerateReports=false
          surefire-report:report
        working-directory: Sample
      - name: Upload test resuls
        if: always()
        uses: actions/upload-artifact@v1
        with: 
          name: test-results
          path: Sample/target/surefire-reports
      - name: copy file
        uses: canastro/copy-file-action@master
        with:
          source: "Sample/target/sample-1.0.0-SNAPSHOT.jar"
          target: "Sample/docker/"
      - name: Upload package
        if: always()
        uses: actions/upload-artifact@v3
        with: 
          name: package
          path: Sample/docker/

  #AKS:
  #  runs-on: ubuntu-latest
  #  needs: build
  #  steps:
  #    - name: Download package
  #      uses: actions/download-artifact@v3
  #      with:
  #        name: package
  #        path: Sample/docker
  #    - name: Setup Docker
  #      uses: docker/setup-buildx-action@v1
  #    - name: Azure login
  #      uses: azure/login@v1.4.3
  #      with:
  #        client-id: ${{ secrets.AZURE_CLIENT_ID }}
  #        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
  #        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  #    - name: ACR login, build, push
  #      run: |
  #        az acr login -n ${{ secrets.REGISTRY }}
  #        docker build Sample/docker/ -t ${{ secrets.REGISTRY }}.azurecr.io/experiment:v1
  #        docker push ${{ secrets.REGISTRY }}.azurecr.io/experiment:v1
  #    - name: Set AKS context
  #      id: set-context
  #      uses: azure/aks-set-context@v3
  #      with:
  #        resource-group: '${{ secrets.resource_group }}' 
  #        cluster-name: '${{ secrets.cluster_name }}'
  #    - name: Setup kubectl
  #      id: install-kubectl
  #      uses: azure/setup-kubectl@v3
  #    - name: Deploy to AKS
  #      id: deploy-aks
  #      uses: Azure/k8s-deploy@v4
  #      with:
  #        namespace: 'default'
  #        manifests: |
  #            ./Sample/docker/experiment.yaml
  #        images: '${{ secrets.registry }}.azurecr.io/${{ secrets.repository }}/experiment:v1'
  #        pull-images: false

  DockerHub:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download package
        uses: actions/download-artifact@v3
        with:
          name: package
          path: Sample/docker
      - name: Setup Docker
        uses: docker/setup-buildx-action@v1
      - name: login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: build and push image to DockerHub
        uses: docker/build-push-action@v2
        with:
          context: ./Sample/docker/
          push: true
          tags: mortarco/experiment:latest
          
  grype:
    runs-on: ubuntu-latest
    needs: DockerHub
    steps:
      - name: Setup Docker
        uses: docker/setup-buildx-action@v1
      - name: login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Generate sbom
        uses: anchore/sbom-action@v0.14.1
        with:
          image: mortarco/experiment:latest
          format: spdx-json
          output-file: "${{ github.event.repository.name }}-sbom.spdx.json"
      - name: Scan SARIF
        uses: anchore/scan-action@v3
        id: scan_sarif
        with:
          sbom: "${{ github.event.repository.name }}-sbom.spdx.json"
          output-format: sarif
          fail-build: false
      - name: Upload SARIF report
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.scan_sarif.outputs.sarif }}
      - name: Scan json
        uses: anchore/scan-action@v3
        id: scan_json
        with:
          sbom: "${{ github.event.repository.name }}-sbom.spdx.json"
          output-format: json
          fail-build: false
      - name: Upload json
        uses: actions/upload-artifact@v1
        with: 
          name: grype
          path: ${{ steps.scan_json.outputs.json }}
        
  trivy:
    runs-on: ubuntu-latest
    needs: DockerHub
    steps:
      - name: Upload spdx
        uses: aquasecurity/trivy-action@master
        with:
          format: 'spdx-json'
          output: 'dependency-results.spdx.json'
          image-ref: mortarco/experiment:latest
        env:
          TRIVY_AUTH_URL: https://registry.hub.docker.com
          TRIVY_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          TRIVY_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Upload json
        uses: actions/upload-artifact@v1
        with: 
          name: trivysbom
          path: 'dependency-results.spdx.json'
      - name: Upload sbom
        uses: aquasecurity/trivy-action@master
        with:
          format: 'github'
          output: 'dependency-results.sbom.json'
          image-ref: mortarco/experiment:latest
          github-pat: ${{ secrets.GITHUB_TOKEN }}
        env:
          TRIVY_AUTH_URL: https://registry.hub.docker.com
          TRIVY_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          TRIVY_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: scan sarif
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: mortarco/experiment:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
        env:
          TRIVY_AUTH_URL: https://registry.hub.docker.com
          TRIVY_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          TRIVY_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: upload sarif
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      - name: scan json
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: mortarco/experiment:latest
          format: 'json'
          output: 'trivy-results.json'
        env:
          TRIVY_AUTH_URL: https://registry.hub.docker.com
          TRIVY_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          TRIVY_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Upload json
        uses: actions/upload-artifact@v1
        with: 
          name: trivy
          path: 'trivy-results.json'
       
